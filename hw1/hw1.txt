Report for Homework 1:
1. Knowing that functional languages do not have the idea of iteration and instead using recursion, I knew I had to recurse and traverse the list. I figured out that the syntax for this uses the "::" operator to split an element into the 'head' - first element and 'tail' - rest of the list. This allowed me to traverse the list. The next step was to check if the element occurs in the second list, initially I achieved this using the List.exists and passing it a func that returned true iff the 'head' was found but then I later replaced this with the more succint List.mem.
2. This was fairly straight-forward, I checked if 2 sets are equal by checking if they are subsets of each other as we do in regular math to show equality for two sets. 
3. The union function was similar to my subset approach except here if an element wasn’t found, I added it to the second list. 
4. The intersection function was harder because no recursive approach I tried worked, but I then looked up List.filter function that helped me solve the problem easily without using recursion when used in conjunction with the List.mem function. 
5. I knew mathematically that A \ B = A intersection B complement, this was then fairly easy to do by tweaking the implementation for the  intersection function. 
6. For this function, I knew my base case was the case when x = f x, but my recursive step was harder to find. Since logically I thought any random value could work, I decided f x was an effective one. 
7. This was definitely the hardest part of the homework and I spent a fair amount of a time brainstorming a strategy. Once I did have a mathematical function (that I got to by thinking of the grammar as a directed graph), I struggled to implement as I didn’t understand the symbol type properly and the values it could take. I understood this in office hours and was then able to nail the correct syntax for the answer. 
